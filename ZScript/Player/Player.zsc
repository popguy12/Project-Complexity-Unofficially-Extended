class dmgFloorfix : PowerProtection { Default { DamageFactor "Slime", 0.667; }} //integrates code from nashmove.pk3

class Kicking : Inventory { Default { Inventory.MaxAmount 1; } }

class Sliding : Inventory { Default { Inventory.MaxAmount 1; } }

class PCmarine : Doomplayer 
{
	// How much to reduce the slippery movement.
	// Lower number = less slippery.
	const DECEL_MULT = 0.8; //0.8

	Vector2 slidedirection;
	bool lastground;
	double 	ssup;
	
	SpriteID skinSprite;
	int skinInd;
	bool hasSkin;
	void checkSkin(){
		let plr = self.player;
		if(plr){
			skinInd = plr.GetSkin();
			hasSkin = skinInd != 0;
			skinSprite = sprite;
		}
	}
	
	bool inDeathState;
	
	Default
	{
		Health 100;
		Gibhealth -50;
		Player.DisplayName "Just a an Edgy fuck";
		Player.SoundClass "OKMarine";
		Species "Player";
		+THRUSPECIES;
		Bloodtype "NashGoreDefaultBlood";
		Bloodcolor "Red";
		Player.viewheight 48;
		Player.AttackZOffset 20;
		Player.ForwardMove 1;
		Player.sideMove 1;
		Player.JumpZ 8;
		Player.face "STF";
		Player.CrouchSprite "PLYC";
		Damagefactor "PlayerDevatravelsplash", 0.0;
		Damagefactor "havocstrailplash", 0.0;
		Damagefactor "EPelletboom", 0.25;
		Damagefactor "Efist", 0.0;
		Damagefactor "Playersledgekaboom", 0.0;

		Player.startitem "Miniarmor";

		Player.startitem "Justapistol";
		Player.startitem "Justbarehands";
		//Player.startitem "JustsomeC4";

		Player.startitem "Pistolclip", 15;
		Player.startitem "MPistolclip", 33;
		Player.startitem "SMGmag", 50;
		Player.startitem "Shelltube", 10;
		Player.startitem "Revolvermag", 6;
		Player.startitem "Doubletube", 2;
		Player.startitem "Quadtube", 4;
		Player.startitem "Shellmag", 20;
		Player.startitem "Riflemag", 30;
		Player.startitem "BattleRiflemag", 20;
		Player.startitem "Rocketmag", 6;
		Player.startitem "GLMag", 4;
		Player.startitem "Plasmacharge", 50;
		Player.startitem "CellCharge", 5;
		Player.startitem "Demoncharge", 60;
		Player.startitem "Boomtube", 10;
		Player.startitem "Boomertube",6;
		Player.startitem "Boomtube2", 2;
		Player.startitem "Deegclip", 12;

		Player.startitem "Bullets", 75;
		Player.startitem "HGAmmo", 2;
		Player.startitem "Mineammo", 2;
		Player.startitem "C4ammo", 1;
	}

	States
	{
		Spawn:
			SO2N A -1;
			Stop;
		See:
			SO2N ABCD 4;
			Loop;
			
		Missile:
			TNT1 A 0 A_JumpIf(hasSkin, "SkinMissile");
			TNT1 A 0 A_jumpifinventory("Weaponzoom",1,"Scopedmissile");
			//TNT1 A 0 A_jumpifinventory("Meleetoken",1,"Fistmelee");
			SO22 AB 4; //Bright Light("Playgunlight");
			Goto Spawn;
		Scopedmissile:
			SO2F AB 6; //Bright Light("Playgunlight");
			Goto Spawn;
		Melee:
			//TNT1 A 0 A_jumpifinventory("Meleetoken",1,"Fistmelee");
			TNT1 A 0 A_JumpIf(hasSkin, "SkinMelee");
			SO22 AB 4;
			Goto Spawn;
			
		SkinMissile:
			#### E 0 {sprite = skinSprite;}
			#### EF 4; //Bright Light("Playgunlight");
			Goto Spawn;
		SkinMelee:
			#### EF 4 {sprite = skinSprite;}
			Goto Spawn;
			
		Pain:
			TNT1 A 0;
			TNT1 A 0 {
				ACS_NamedLockedExecute("Painforpower",0); //Use in pain state
				ACS_NamedLockedExecute("VoidRuneInvisibility",0);
			}
		Pain.fire:
		Pain.slime:
			TNT1 A 0 A_JumpIf(hasSkin, "SkinPain");
			SO2H A 4;
			SO2H A 4 A_Pain;
			Goto Spawn;
			
		SkinPain:
			#### G 4 {sprite = skinSprite;}
			#### G 4 A_Pain;
			Goto Spawn;
			
		Death.slime:
			TNT1 A 0 {
				bNOTARGET = true;
				bNEVERTARGET = true;
			}
			TNT1 A 0 A_JumpIf(hasSkin, "SkinDeath.Slime");
			SOL2 A 5 A_StopAllSounds();
			SOL2 B 5 A_startsound("Player/meltdeath",256,0,1);
			SOL2 C 5 A_NoBlocking;
			SOL2 EFG 5;
			SOL2 G -1;
			Stop;
		Death:
			TNT1 A 0 {
				bNOTARGET = true;
				bNEVERTARGET = true;
			}
			TNT1 A 0 A_JumpIf(hasSkin, "SkinDeath");
			SOL2 A 5 A_StopAllSounds();
			SOL2 B 5 A_PlayerScream;
			SOL2 C 5 A_NoBlocking;
			TNT1 A 0 A_startsound("body/crash",7);
			SOL2 EFG 5;
			SOL2 G -1;
			Stop;
			
		SkinDeath.Slime:
			#### H 5 {
				sprite = skinSprite;
				A_StopAllSounds();
			}
			#### I 5 A_startsound("Player/meltdeath",256,0,1);
			#### J 5 A_NoBlocking;
			#### KLM 5;
			#### N -1;
			Stop;
		SkinDeath:
			#### H 5 {
				sprite = skinSprite;
				A_StopAllSounds();
			}
			#### I 5 A_PlayerScream;
			#### J 5 A_NoBlocking;
			#### J 0 A_startsound("body/crash",7);
			#### KLM 5;
			#### N -1;
			Stop;
			
		XDeath:
			TNT1 A 0 {
				bNOTARGET = true;
				bNEVERTARGET = true;
			}
			TNT1 A 0 A_StopAllSounds();
			TNT1 A 0 A_SpawnItemEx("BrutalSkull",0,0,56,random(-700,700)/100.00,random(-700,700)/100.00,random(600,1400)/100.00,random(-180,180),160,SXF_TRANSFERTRANSLATION);
			TNT1 AAAAAAA 0 A_SpawnItemEx("Nashgoredefaultblood",frandom(-1,1),frandom(-1,1),random(12,40),frandom(-7,7),frandom(-7,7),frandom(6,14),frandom(-18,18),SXF_TRANSFERTRANSLATION);
			TNT1 AAA 0 A_SpawnItemEx("NashGoreGibs",frandom(-1,1),frandom(-1,1),random(12,40),frandom(-7,7),frandom(-7,7),frandom(6,14),frandom(-18,18),SXF_TRANSFERTRANSLATION);
			SKGB A 1;
			SKGB A 8 A_XScream;
			SKGB A 5 A_NoBlocking;
			TNT1 A 0 A_startsound("body/crash",7);
			SKGB BCDEF 5;
			SKGB G -1;
			Stop;
		
		SkinXDeath:
			#### O 5 {
				sprite = skinSprite;
				bNOTARGET = true;
				bNEVERTARGET = true;
			}
			#### ####### 0 A_SpawnItemEx("Nashgoredefaultblood",frandom(-1,1),frandom(-1,1),random(12,40),frandom(-7,7),frandom(-7,7),frandom(6,14),frandom(-18,18),SXF_TRANSFERTRANSLATION);
			#### P 5 A_XScream;
			#### R 5 A_NoBlocking; 
			#### STUV 5;
			#### W -1;
			Stop;
			
		KickCheckTakeToken:
			NULL A 0 A_TakeInventory("Kicking",1);
		KickCheck:
			TNT1 A 0;
			TNT1 A 1 A_StopSound(414);
			TNT1 A 0 A_JumpIfInventory("Sliding",1,"SlideLoop");
			TNT1 A 0 A_JumpIfInventory("Kicking",1,"DoKick");
			TNT1 A 0 A_JumpIf(
				!(player.original_oldbuttons & BT_CROUCH) 
				&& (player.cmd.buttons & BT_CROUCH) 
				&& (player.cmd.buttons & BT_RUN) 
				&& (player.cmd.forwardmove != 0 || player.cmd.sidemove != 0) 
				&& player.onground 
			, "Slide");
			Loop;
		DoKick:
			TNT1 A 0;
			TNT1 A 0 A_Jump(126, 2);
			TNT1 A 0 A_OverlayFlags(-10, PSPF_FLIP|PSPF_MIRROR, true);
			TNT1 A 0 A_OverlayFlags(-10, PSPF_ADDWEAPON, false);
			TNT1 A 0 A_OverlayOffset(-10, 0, 32);
			TNT1 A 0 A_TakeInventory("Kicking",1);
			TNT1 A 0 A_JumpIf(vel.Z != 0 || pitch < -25, "AirKick");
			TNT1 A 0
			{
				If (countinv("Powerstrength")==1)
				{
					A_startsound("Weapons/BKickswing",40,0);
				}
				Else
				{
					A_startsound("Weapons/Kickswing",40,0);
				}
			}
			KICK N 0;
			#### ABCD 1;
			#### E 6
			{	
				if (CountInv("PowerStrength") == 1)
				{
					SpawnPlayerMissile("SuperKickAttack");
					//A_CustomPunch (300, true, CPF_NOTURN, "BKickpuff", 120);
				}
				Else
				{
					SpawnPlayerMissile("KickAttack");
					//A_CustomPunch(60, true, CPF_NOTURN, "Kickpuff", 120);
				}
			}
			#### FGHIJKLM 1;
			TNT1 A 0 A_OverlayFlags(-10, PSPF_FLIP|PSPF_MIRROR, false);
			TNT1 A 0;
			Goto KickCheckTakeToken;
		AirKick:
			TNT1 A 0
			{
				If (countinv("Powerstrength")==1)
				{
					A_startsound("Weapons/BKickswing",40,0);
					A_Recoil(-24);
				}
				Else
				{
					A_startsound("Weapons/Kickswing",40,0);
					A_Recoil(-12);
				}
			}
			KIK4 N 0;
			#### ABCD 1;
			#### E 6
			{
				if (CountInv("PowerStrength") == 1)
				{
					//A_CustomPunch (300, true, CPF_NOTURN, "BKickpuff", 120);
					SpawnPlayerMissile("SuperKickAttack");
				}
				Else
				{
					//A_CustomPunch (60, true, CPF_NOTURN, "Kickpuff", 120);
					SpawnPlayerMissile("KickAttack");
				}
			}
			#### FGHIJKLMNO 1;
			TNT1 A 0 A_OverlayFlags(-10, PSPF_FLIP|PSPF_MIRROR, false);
			TNT1 A 0;
			Goto KickCheckTakeToken;
		Slide:
			TNT1 A 3;
			TNT1 A 0
			{
				slidedirection = (player.cmd.forwardmove, - player.cmd.sidemove);
				//A_QuakeEx(1, 1, 1, 15, 0, 500, "", 0, 0, 0, 0, 0, 0, 1);
				//A_StartSound("Player/SlideStart", 414);
				//A_GiveInventory("Sliding",1);
				if(VectorAngle(player.cmd.forwardmove, - player.cmd.sidemove) < 0 || VectorAngle(player.cmd.forwardmove, - player.cmd.sidemove) > 179)
				{
					A_OverlayFlags(-10, PSPF_FLIP|PSPF_MIRROR, true);
				}
			}
			SLDK ABCD 1 A_JumpIf(
				(player.cmd.forwardmove == 0 && player.cmd.sidemove == 0) 
				|| !player.onground 
				|| GetCrouchFactor() > 0.7
			, "KickCheckTakeToken");
			TNT1 A 0 A_StartSound("Player/SlideStart", 414);
			TNT1 A 0 A_GiveInventory("Sliding",1);
		SlideLoop:
			SLDK F 1 PC_PlayerSlide();
			SLDK F 1 A_JumpIf(GetCrouchFactor() != 0.5, "SlideEnd");
			SLDK E 1 PC_PlayerSlide();
			SLDK EE 1 A_JumpIf(GetCrouchFactor() != 0.5, "SlideEnd");
			SLDK F 1 PC_PlayerSlide();
			SLDK F 1 A_JumpIf(GetCrouchFactor() != 0.5, "SlideEnd");
			SLDK G 1 PC_PlayerSlide();
			SLDK GG 1 A_JumpIf(GetCrouchFactor() != 0.5, "SlideEnd");
			SLDK F 1 PC_PlayerSlide();
			SLDK F 1 A_JumpIf(GetCrouchFactor() != 0.5, "SlideEnd");
			SLDK E 1 PC_PlayerSlide();
			SLDK EE 1 A_JumpIf(GetCrouchFactor() != 0.5, "SlideEnd");
			TNT1 A 0; //A_JumpIf(BW_SlideLoopSlope(), "SlideLoop")
		SlideEnd:
			TNT1 A 0 A_StartSound("Player/SlideEnd", 413);
			SLDK HIJK 1;
			TNT1 A 0
			{
				A_TakeInventory("Sliding",1);
				A_OverlayFlags(-10, PSPF_FLIP|PSPF_MIRROR, false);
			}
			Goto KickCheckTakeToken;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		if (G_SkillPropertyInt(SKILLP_ACSReturn) == 4)
			GiveInventory("dmgFloorfix",1);
		A_Overlay(-10,"kickcheck", true);
	}
	
	override void MovePlayer()
	{
		let player = self.player;
		UserCmd cmd = player.cmd;

		// [RH] 180-degree turn overrides all other yaws
		if (player.turnticks)
		{
			player.turnticks--;
			Angle += (180. / TURN180_TICKS);
		}
		else
		{
			Angle += cmd.yaw * (360./65536.);
		}

		player.onground = (pos.z <= floorz) || bOnMobj || bMBFBouncer || (player.cheats & CF_NOCLIP2);

		// killough 10/98:
		//
		// We must apply thrust to the player and bobbing separately, to avoid
		// anomalies. The thrust applied to bobbing is always the same strength on
		// ice, because the player still "works just as hard" to move, while the
		// thrust applied to the movement varies with 'movefactor'.

		if (cmd.forwardmove | cmd.sidemove)
		{
			double forwardmove, sidemove;
			double bobfactor;
			double friction, movefactor;
			double fm, sm;

			[friction, movefactor] = GetFriction();
			bobfactor = friction < ORIG_FRICTION ? movefactor : ORIG_FRICTION_FACTOR;
			if (!player.onground && !bNoGravity && !waterlevel)
			{
				// [RH] allow very limited movement if not on ground.
				movefactor *= level.aircontrol;
				bobfactor*= level.aircontrol;
			}

			fm = cmd.forwardmove;
			sm = cmd.sidemove;
			[fm, sm] = TweakSpeeds (fm, sm);
			fm *= Speed / 256;
			sm *= Speed / 256;

			// When crouching, speed and bobbing have to be reduced
			if (CanCrouch() && player.crouchfactor != 1)
			{
				fm *= player.crouchfactor;
				sm *= player.crouchfactor;
				bobfactor *= player.crouchfactor;
			}

			forwardmove = fm * movefactor * (35 / TICRATE);
			sidemove = sm * movefactor * (35 / TICRATE);

			if (forwardmove)
			{
				Bob(Angle, cmd.forwardmove * bobfactor / 256., true);
				ForwardThrust(forwardmove, Angle);
			}
			if (sidemove)
			{
				let a = Angle - 90;
				Bob(a, cmd.sidemove * bobfactor / 256., false);
				Thrust(sidemove, a);
			}

			if (health > 0 && !(player.cheats & CF_PREDICTING) && (forwardmove || sidemove))
			{
				PlayRunning ();
			}

			if (player.cheats & CF_REVERTPLEASE)
			{
				player.cheats &= ~CF_REVERTPLEASE;
				player.camera = player.mo;
			}
		}
		
		if (lastground && !player.onground && !bFly && !bFlyCheat && (abs(pos.z-floorz) <= maxdropoffheight) && (player.jumptics == 0) && (vel.z <= 0))
		{
			// test for gap crossing (i.e: climbing up platforms with holes between them)
			Vector3 storepos = pos;
			double storefloorz = floorz;
			bool crossgap = false;
			for ( int i=1; i<=4; i++ )	// test up to 4 steps ahead, should be enough for most cases
			{
				SetOrigin(Vec3Offset(vel.x,vel.y,vel.z),true);
				if ( floorz < storepos.z ) continue;
				crossgap = true;
				break;
			}
			SetOrigin(storepos,true);
			floorz = storefloorz;
			if ( !crossgap )
			{
				ssup = max(0,(pos.z-floorz));
				SetZ(floorz);
				lastground = player.onground = true;
			}
		}
	}
	
	override void Tick()
	{
		checkSkin();
		if (!player || !player.mo || player.mo != self)
		{
			Super.Tick();
			return;
		}
		
		if (player.onground)
		{
			if (!pc_NashmoveCompat)
			{
				// bump up the player's speed to compensate for the deceleration
				// TO DO: math here is shit and wrong, please fix
				A_SetSpeed(3.6 - DECEL_MULT * 2); //1.0
				// decelerate the player
				vel.xy *= DECEL_MULT;
				// make the view bobbing match the player's movement
				ViewBob = DECEL_MULT;
			}
			else
			{
				A_SetSpeed(1);
			}
		}
		
		Super.Tick();
		
		if (health < 1 && !inDeathState) {
			inDeathState = true;
			
			State newState = ResolveState("Death");
			if (Health < GetGibHealth()) newState = ResolveState("XDeath");
			
			bool isInDeathState = InStateSequence(CurState, newState);			
			if (!isInDeathState) SetState(newState);
		} else if (health > 0) inDeathState = false;
		
		lastground = player.onground;
		player.viewz += ssup;
		ssup = max(0,(ssup*0.7)-0.25);
	}
	
	void PC_PlayerSlide()
	{
		Vector2 modslidedirection = (0, 0);
		modslidedirection = RotateVector((slidedirection.X, slidedirection.Y), Angle);
		Thrust(24, VectorAngle(modslidedirection.X, modslidedirection.Y));
		A_SpawnProjectile("KickAttack", 16, 0, VectorAngle(slidedirection.X, slidedirection.Y), CMF_AIMDIRECTION, 0);
	}
}

class KickAttack : FastProjectile
{
	Default
	{
		Radius 6;
		Height 6;
		DamageType "Kick";
		Projectile;
		+FORCEXYBILLBOARD;
		+NOEXTREMEDEATH;
		RenderStyle "Add";
		Alpha 0.6;
		Damage (20);
		Speed 16;
		AttackSound "weapons/fisthit";
		SeeSound "None";
		DeathSound "None";
		Decal "Bcrack";
	}
	States
	{
	Spawn:
		TNT1 A 1 BRIGHT;
		TNT1 AA 1;
		Stop;
	Crash:
	XDeath:
		TNT1 A 1
		{
			A_startsound("weapons/fisthit");
			A_SpawnItemEx("smokeFX7", random(13,-13), random(13,-13), random(13,-13), 0.1*random(2,5), 0.1*random(2,5), 0.1*random(2,5), random(0,360), 128, 0);
		}
		TNT1 A 1;
		Stop;
	Death:
		TNT1 A 1
		{
			A_startsound("weapons/punchwall");
			A_SpawnItemEx("smokeFX7", random(13,-13), random(13,-13), random(13,-13), 0.1*random(2,5), 0.1*random(2,5), 0.1*random(2,5), random(0,360), 128, 0);
		}
		TNT1 A 1;
		Stop;
	}
}


class SuperKickAttack : KickAttack
{
	Default
	{
		-NOEXTREMEDEATH;
		Damage (80);
		DamageType "Kick";
	}
}

class BrutalSkull : Actor
{
	Default
	{
		Speed 5;
		Mass 6;
		Scale 0.25;
		BounceFactor 0.5;
		BounceCount 3;
		SeeSound "OKmarine/Skullbounce";
		+MISSILE;
		+DOOMBOUNCE;
		+CANNOTPUSH;
		+DONTSPLASH;
		+NOTELEPORT;
		+NOBLOCKMAP;
		+MOVEWITHSECTOR;
		-NOGRAVITY;
		-SOLID;
		+CLIENTSIDEONLY;
		+FORCEXYBILLBOARD;
		+NOTONAUTOMAP;
	}
    States
    {
    Spawn:
        BGB1 ABCDEFGH 3;
        loop;
    Death:
        TNT1 A 0 A_Jump(255,"Death1","Death2","Death3","Death4");
	Death1:
        BGB1 A 2100;
	    BGB1 AAAAAAAAAA 1 A_FadeOut(0.1);
        stop;
	Death2:
        BGB1 D 2100;
	    BGB1 DDDDDDDDDD 1 A_FadeOut(0.1);
        stop;
	Death3:
        BGB1 J 2100;
	    BGB1 JJJJJJJJJJ 1 A_FadeOut(0.1);
        stop;
	Death4:
        BGB1 L 2100;
	    BGB1 LLLLLLLLLL 1 A_FadeOut(0.1);
        stop;
    }
}

class FootstepsHandler : EventHandler
{
	override void PlayerEntered(PlayerEvent e)
	{
		let steps = BD_Footsteps(Actor.Spawn("BD_Footsteps"));
		if (steps) {
			steps.Init(players[e.playerNumber].mo);
			steps.fplayer = players[e.playerNumber];
		}
	}
}

class BD_Footsteps : Actor
{
	Default
	{
		+NOINTERACTION;
	}
	
	//the player footsteps are attached to.
	PlayerPawn toFollow;
	PlayerInfo fplayer;
	
	protected int updateTics;
	
	protected transient CVar f_enabled_cache;	
	protected transient CVar f_vol_cache;
	protected transient CVar f_delay_cache;
	protected bool f_enabled;	
	protected double f_vol;
	protected double f_delay;

	//attach PlayerPawn, load the texture/sound associated tables.
	void Init(PlayerPawn attached_player)
	{
		toFollow = attached_player;
	}
	
	override void Tick()
	{
		if (!toFollow)
		{
			destroy();
			return;
		}
		//Cache cvars:
		if (f_enabled_cache == null)
			f_enabled_cache = CVar.GetCVar('Spook_fs_enabled',fplayer);
		if (f_vol_cache == null)
			f_vol_cache = CVar.GetCVar('Spook_fs_volume_mul',fplayer);
		if (f_delay_cache == null)
			f_delay_cache = CVar.GetCVar('Spook_fs_delay_mul',fplayer);
		f_enabled = f_enabled_cache.GetBool();
		f_vol = f_vol_cache.GetFloat();
		f_delay = f_delay_cache.GetFloat();
		
		updateTics--;
		
		//0) do nothing until updateTics is below 0
		if (updateTics > 0)
			return;
		
		//1) Update the Footstep actor to follow Player.
		SetOrigin(toFollow.pos, false);
		floorz = toFollow.floorz;
		   
		double playerVel2D = sqrt(toFollow.vel.x * toFollow.vel.x + toFollow.vel.y * toFollow.vel.y);
		
		//2) Only play footsteps when on ground, and if the player is moving fast enough.
		if (f_enabled && (playerVel2D > 0.1) && (toFollow.pos.z - toFollow.floorz <= 0) && !toFollow.FindInventory("Sliding")) {
			
			sound stepsound;
			//current floor texture for the player:
			name floortex = name(Texman.GetName(toFollow.floorpic));
			//no sound if steppin on sky
			if (floorpic == skyflatnum)
				stepsound = "none";
			else
				stepsound = GetFlatSound(Texman.GetName(toFollow.floorpic));
			//sound volume is amplified by speed.
			double soundVolume = f_vol * playerVel2D * 0.12; //multiplied by 0.12 because raw value is too high to be used as volume
			
			//play the sound if it's non-null
			if (stepsound != "none")
				toFollow.A_StartSound(stepsound, CHAN_AUTO, CHANF_LOCAL|CHANF_UI, volume:soundVolume);
			
			//delay CVAR value is inverted, where 1.0 is default, higher means more frequent, smaller means less frequent
			double dmul = (2.1 - Clamp(f_delay,0.1,2));
			updateTics = (gameinfo.normforwardmove[0] - playerVel2D) * dmul;
		}
		else
		{
			// no need to poll for change too often
			updateTics = 1;
		}
	}
	
	// a totally ugly check for texture name:
	sound GetFlatSound(name texname) {
		//first check the all flat names array
		bool inlist = false;
		for (int i = 0; i < FLATS_NAMES.Size(); i++) {
			if (FLATS_NAMES[i] == texname) {
				inlist = true;
				break;
			}
		}
		// and return default sound if not found
		if (!inlist) {			
			return "step/default";
		}
		//if found, check against each array with the names of differently sounding floors
		for (int i = 0; i < FLATS_SLIME.Size(); i++) {
			if (FLATS_SLIME[i] == texname)
				return "step/slime";
		}
		for (int i = 0; i < FLATS_SLIMY.Size(); i++) {
			if (FLATS_SLIMY[i] == texname)
				return "step/slimy";
		}
		for (int i = 0; i < FLATS_LAVA.Size(); i++) {
			if (FLATS_LAVA[i] == texname)
				return "step/lava";
		}
		for (int i = 0; i < FLATS_ROCK.Size(); i++) {
			if (FLATS_ROCK[i] == texname)
				return "step/rock";
		}
		for (int i = 0; i < FLATS_WOOD.Size(); i++) {
			if (FLATS_WOOD[i] == texname)
				return "step/wood";
		}
		for (int i = 0; i < FLATS_TILEA.Size(); i++) {
			if (FLATS_TILEA[i] == texname)
				return "step/tile/a";
		}
		for (int i = 0; i < FLATS_TILEB.Size(); i++) {
			if (FLATS_TILEB[i] == texname)
				return "step/tile/b";
		}
		for (int i = 0; i < FLATS_HARD.Size(); i++) {
			if (FLATS_HARD[i] == texname)
				return "step/hard";
		}
		for (int i = 0; i < FLATS_CARPET.Size(); i++) {
			if (FLATS_CARPET[i] == texname)
				return "step/carpet";
		}
		for (int i = 0; i < FLATS_METALA.Size(); i++) {
			if (FLATS_METALA[i] == texname)
				return "step/metal/a";
		}
		for (int i = 0; i < FLATS_METALB.Size(); i++) {
			if (FLATS_METALB[i] == texname)
				return "step/metal/b";
		}
		for (int i = 0; i < FLATS_DIRT.Size(); i++) {
			if (FLATS_DIRT[i] == texname)
				return "step/dirt";
		}
		for (int i = 0; i < FLATS_GRAVEL.Size(); i++) {
			if (FLATS_GRAVEL[i] == texname)
				return "step/gravel";
		}
		return "step/default";
	}
	
	static const name FLATS_NAMES[] = {
			"FWATER1","FWATER2","FWATER3","FWATER4",
			"FLOOR0_1","FLOOR0_3","FLOOR1_7","FLOOR4_1","FLOOR4_5","FLOOR4_6",
			"TLITE6_1","TLITE6_5","CEIL3_1","CEIL3_2","CEIL4_2","CEIL4_3","CEIL5_1",
			"FLAT2","FLAT5","FLAT18",
			"FLOOR0_2","FLOOR0_5","FLOOR0_7",
			"FLAT5_3","CRATOP1","CRATOP2",
			"FLAT9","FLAT17","FLAT19",
			"COMP01","GRNLITE1","FLOOR1_1","FLAT14","FLAT5_5","FLOOR1_6",
			"CEIL4_1","GRASS1","GRASS2","RROCK16","RROCK19",
			"FLOOR6_1","FLOOR6_2","FLAT10",
			"MFLR8_3","MFLR8_4","RROCK17","RROCK18",
			"FLOOR0_6","FLOOR4_8","FLOOR5_1","FLOOR5_2","FLOOR5_3","FLOOR5_4",
			"TLITE6_4","TLITE6_6","FLOOR7_1","MFLR8_1","CEIL3_5",
			"CEIL5_2","CEIL3_6","FLAT8",
			"SLIME13","STEP1","STEP2",
			"GATE1","GATE2","GATE3",
			"CEIL1_2","CEIL1_3","SLIME14","SLIME15","SLIME16",
			"FLAT22","FLAT23","CONS1_1","CONS1_5","CONS1_7",
			"GATE4","FLAT4","FLAT1","FLAT5_4",
			"MFLR8_2","FLAT1_1","FLAT1_2","FLAT1_3","FLAT5_7","FLAT5_8",
			"GRNROCK","RROCK01","RROCK02","RROCK03","RROCK04","RROCK05","RROCK06","RROCK07","RROCK08","RROCK09","RROCK10","RROCK11","RROCK12","RROCK13","RROCK14","RROCK15","RROCK20",
			"SLIME09","SLIME10","SLIME11","SLIME12","FLAT5_6","FLOOR3_3","FLAT20",
			"CEIL3_3","CEIL3_4","FLAT3","FLOOR7_2",
			"DEM1_1","DEM1_2","DEM1_3","DEM1_4","DEM1_5","DEM1_6",
			"CEIL1_1","FLAT5_1","FLAT5_2",
			"NUKAGE1","NUKAGE2","NUKAGE3","BLOOD1","BLOOD2","BLOOD3","SLIME01","SLIME02","SLIME03","SLIME04","SLIME05","SLIME06","SLIME07","SLIME08",
			"SFLR6_1","SFLR6_4","SFLR7_1","SFLR7_4","LAVA1","LAVA2","LAVA3","LAVA4","F_SKY1","
			BDT_WFL","BDT_BFL","BDT_LFL","BDT_AFL","BDT_SFL1","BDT_SFL2"
		};
		
		//"step/slime"
		static const name FLATS_SLIME[] = {	"BDT_WFL", "BDT_BFL", "BDT_AFL", "BDT_SFL1", "BDT_SFL2", "BLOOD1", "BLOOD2", "BLOOD3", "NUKAGE1", "NUKAGE2", "NUKAGE3", "SLIME01", "SLIME02", "SLIME03", "SLIME04", "SLIME05", "SLIME06", "SLIME07", "SLIME08", "FWATER1", "FWATER2", "FWATER3", "FWATER4" };
		//"step/slimy"
		static const name FLATS_SLIMY[] = { "SFLR6_1","SFLR6_4","SFLR7_1","SFLR7_4" };
		//"step/lava"
		static const name FLATS_LAVA[]	= { "LAVA1","LAVA2","LAVA3","LAVA4","BDT_LFL" };
		//"step/rock"
		static const name FLATS_ROCK[]	= { "SLIME09","SLIME10","SLIME11","SLIME12","RROCK01","RROCK02","RROCK05","RROCK06","RROCK07","RROCK08","FLAT1","FLAT1_1","FLAT1_2","FLAT5_6","FLAT5_7","FLAT5_8","FLOOR5_4","GRNROCK","MFLR8_2","MFLR8_3","RROCK03","RROCK04","RROCK09","RROCK10","RROCK11","RROCK12","RROCK13","RROCK14","RROCK15","SLIME13" };
		//"step/wood"
		static const name FLATS_WOOD[]	= { "FLOOR0_2","CEIL1_1","CRATOP1","CRATOP2","FLAT5_1","FLAT5_2" };
		//"step/tile/a"
		static const name FLATS_TILEA[] = { "CEIL1_3","CEIL3_3","CEIL3_4","COMP01","FLAT2","FLAT3","FLAT8","FLAT9","FLAT17","FLAT18","FLAT19","FLOOR0_6","FLOOR0_7","FLOOR3_3","FLOOR4_1","FLOOR4_5","FLOOR4_6","FLOOR4_8","FLOOR5_1","FLOOR5_2","FLOOR5_3","TLITE6_1","TLITE6_4","TLITE6_5","TLITE6_6" };
		//"step/tile/b"
		static const name FLATS_TILEB[] = { "DEM1_1","DEM1_2","DEM1_3","DEM1_4","DEM1_5","DEM1_6","FLOOR7_2" };
		//"step/hard"
		static const name FLATS_HARD[]	= { "CEIL3_1","CEIL3_2","CEIL3_5","CEIL3_6","CEIL5_1","CEIL5_2","FLAT5","FLOOR0_1","FLOOR0_3","FLOOR1_6","FLOOR1_7","FLOOR7_1","GRNLITE1","MFLR8_1" };
		//"step/carpet"
		static const name FLATS_CARPET[] = { "CEIL4_1","CEIL4_2","CEIL4_3","FLAT5_3","FLAT5_4","FLAT5_5","FLAT14","FLOOR1_1" };
		//"step/metal/a"
		static const name FLATS_METALA[] = { "FLOOR0_5","CEIL1_2","FLAT1_3","FLAT20","GATE1","GATE2","GATE3","SLIME14","SLIME15","SLIME16","STEP1","STEP2" };
		//"step/metal/b"
		static const name FLATS_METALB[] = { "CONS1_1","CONS1_5","CONS1_7","FLAT4","FLAT22","FLAT23","GATE4" };
		//"step/dirt"
		static const name FLATS_DIRT[]	= { "FLAT10","GRASS1","GRASS2","MFLR8_4","RROCK16","RROCK17","RROCK18","RROCK19","RROCK20" };
		//"step/gravel"
		static const name FLATS_GRAVEL[] = { "FLOOR6_1","FLOOR6_2" };
}
